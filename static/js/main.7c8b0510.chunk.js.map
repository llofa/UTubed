{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","decentratube.png","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","Component","componentWillMount","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","DVideo","networks","dvideo","Contract","abi","address","methods","videoCount","call","videosCount","i","videos","video","state","latest","currentHash","hash","currentTitle","title","loading","constructor","props","super","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","this","buffer","Buffer","result","console","log","uploadVideo","add","error","send","from","on","changeVideo","bind","id","className","Navbar","href","rel","src","width","height","alt","Identicon","toString","module","exports","Main","variant","style","maxHeight","controls","minWidth","onSubmit","videoTitle","value","type","accept","onChange","ref","input","placeholder","required","map","key","onClick"],"mappings":"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","file":"static/js/main.7c8b0510.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\nimport DVideo from \"../abis/DVideo.json\";\nimport Navbar from \"./Navbar\";\nimport Main from \"./Main\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\n\n//Declare IPFS\nconst ipfsClient = require(\"ipfs-http-client\");\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n}); // leaving out the arguments will default to these values\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    // Load account\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    // Network ID\n    const networkId = await web3.eth.net.getId();\n    const networkData = DVideo.networks[networkId];\n    if (networkData) {\n      const dvideo = new web3.eth.Contract(DVideo.abi, networkData.address);\n      this.setState({ dvideo });\n      const videosCount = await dvideo.methods.videoCount().call();\n      this.setState({ videosCount });\n\n      // Load videos, sort by newest\n      for (var i = videosCount; i >= 1; i--) {\n        const video = await dvideo.methods.videos(i).call();\n        this.setState({\n          videos: [...this.state.videos, video],\n        });\n      }\n\n      //Set latest video with title to view as default\n      const latest = await dvideo.methods.videos(videosCount).call();\n      this.setState({\n        currentHash: latest.hash,\n        currentTitle: latest.title,\n      });\n      this.setState({ loading: false });\n    } else {\n      window.alert(\"DVideo contract not deployed to detected network.\");\n    }\n  }\n\n  captureFile = (event) => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) });\n      console.log(\"buffer\", this.state.buffer);\n    };\n  };\n\n  uploadVideo = (title) => {\n    console.log(\"Submitting file to IPFS...\");\n\n    //adding file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log(\"IPFS result\", result);\n      if (error) {\n        console.error(error);\n        return;\n      }\n\n      this.setState({ loading: true });\n      this.state.dvideo.methods\n        .uploadVideo(result[0].hash, title)\n        .send({ from: this.state.account })\n        .on(\"transactionHash\", (hash) => {\n          this.setState({ loading: false });\n        });\n    });\n  };\n\n  changeVideo = (hash, title) => {\n    this.setState({ currentHash: hash });\n    this.setState({ currentTitle: title });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      buffer: null,\n      account: \"\",\n      dvideo: null,\n      videos: [],\n      loading: true,\n      currentHash: null,\n      currentTitle: null,\n    };\n\n    this.uploadVideo = this.uploadVideo.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n    this.changeVideo = this.changeVideo.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        {this.state.loading ? (\n          <div id=\"loader\" className=\"text-center mt-5\">\n            <p>Loading...</p>\n          </div>\n        ) : (\n          <Main\n            videos={this.state.videos}\n            uploadVideo={this.uploadVideo}\n            captureFile={this.captureFile}\n            changeVideo={this.changeVideo}\n            currentHash={this.state.currentHash}\n            currentTitle={this.state.currentTitle}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport Identicon from \"identicon.js\";\nimport dvideo from \"../decentratube.png\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow text-monospace\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"https://github.com/llofa\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src={dvideo}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n            alt=\"\"\n          />\n          &nbsp;DecentraTube\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\">{this.props.account}</small>\n            </small>\n            {this.props.account ? (\n              <img\n                className=\"ml-2\"\n                width=\"30\"\n                height=\"30\"\n                src={`data:image/png;base64,${new Identicon(\n                  this.props.account,\n                  30\n                ).toString()}`}\n                alt=\"\"\n              />\n            ) : (\n              <span></span>\n            )}\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","module.exports = __webpack_public_path__ + \"static/media/decentratube.aa2f70be.png\";","import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\n\nclass Main extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid text-monospace\">\n        <br></br>\n        &nbsp;\n        <br></br>\n        <div className=\"row\">\n          <div className=\"col-md-10\">\n            <Alert variant=\"warning\">\n              Note: Dapp runs on{\" \"}\n              <a\n                href=\"https://faucet.rinkeby.io/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Rinkeby Testnet\n              </a>\n              , but bugs persist. 1.IPFS takes awhile to respond, especially for\n              video wait until you get a Metamask confirmation, takes around\n              60sec. Web3 networks are slow.\n            </Alert>\n            <div\n              className=\"embed-responsive embed-responsive-16by9\"\n              style={{ maxHeight: \"768px\" }}\n            >\n              <video\n                src={`https://ipfs.infura.io/ipfs/${this.props.currentHash}`}\n                controls\n              ></video>\n            </div>\n            <h3>\n              <b>\n                <i>{this.props.currentTitle}</i>\n              </b>\n            </h3>\n          </div>\n          <div\n            className=\"col-md-2 border border-danger overflow-auto text-center\"\n            style={{ maxHeight: \"768px\", minWidth: \"175px\" }}\n          >\n            <h5>\n              <b>Share Video</b>\n            </h5>\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                const title = this.videoTitle.value;\n                this.props.uploadVideo(title);\n              }}\n            >\n              &nbsp;\n              <input\n                type=\"file\"\n                accept=\".mp4, .mkv .ogg .wmv\"\n                onChange={this.props.captureFile}\n                style={{ width: \"250px\" }}\n              />\n              <div className=\"form-group mr-sm-2\">\n                <input\n                  id=\"videoTitle\"\n                  type=\"text\"\n                  ref={(input) => {\n                    this.videoTitle = input;\n                  }}\n                  className=\"form-control-sm\"\n                  placeholder=\"Title...\"\n                  required\n                />\n              </div>\n              <button type=\"submit\" className=\"btn btn-danger btn-block btn-sm\">\n                Upload!\n              </button>\n              &nbsp;\n            </form>\n            {this.props.videos.map((video, key) => {\n              return (\n                <div\n                  className=\"card mb-4 text-center bg-secondary mx-auto\"\n                  style={{ width: \"175px\" }}\n                  key={key}\n                >\n                  <div className=\"card-title bg-dark\">\n                    <small className=\"text-white\">\n                      <b>{video.title}</b>\n                    </small>\n                  </div>\n                  <div>\n                    <p\n                      onClick={() =>\n                        this.props.changeVideo(video.hash, video.title)\n                      }\n                    >\n                      <video\n                        src={`https://ipfs.infura.io/ipfs/${video.hash}`}\n                        style={{ width: \"150px\" }}\n                      />\n                    </p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n"],"sourceRoot":""}